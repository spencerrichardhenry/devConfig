// Place your key bindings in this file to override the defaults
[
    {
        "command": "editor.action.clipboardCopyAction",
        "key": "win+c"
    },
    {
        "command": "editor.action.clipboardCutAction",
        "key": "win+x",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.clipboardCutAction",
        "key": "shift+[Delete]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.clipboardPasteAction",
        "key": "win+v"
    },
    {
        "command": "redo",
        "key": "shift+win+z"
    },
    {
        "command": "redo",
        "key": "shift+alt+[Backspace]"
    },
    {
        "command": "undo",
        "key": "win+z"
    },
    {
        "command": "workbench.view.debug",
        "key": "win+5"
    },
    {
        "command": "workbench.action.navigateBack",
        "key": "win+BracketLeft"
    },
    {
        "command": "workbench.action.navigateBack",
        "key": "win+alt+[ArrowLeft]"
    },
    {
        "command": "references-view.showCallHierarchy",
        "key": "ctrl+alt+h",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "command": "git.commitAll",
        "key": "win+k",
        "when": "!inDebugMode && !terminalFocus"
    },
    {
        "command": "workbench.view.debug",
        "key": "ctrl+alt+d"
    },
    {
        "command": "workbench.action.closeActiveEditor",
        "key": "win+w"
    },
    {
        "command": "editor.action.triggerSuggest",
        "key": "ctrl+[Space]",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "command": "editor.foldAll",
        "key": "shift+win+[NumpadSubtract]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.foldAll",
        "key": "shift+win+[Minus]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.fold",
        "key": "win+[NumpadSubtract]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.fold",
        "key": "win+[Minus]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.foldRecursively",
        "key": "win+alt+[NumpadSubtract]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.foldRecursively",
        "key": "win+alt+[Minus]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.action.blockComment",
        "key": "win+alt+[Slash]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.blockComment",
        "key": "win+alt+[NumpadDivide]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.blockComment",
        "key": "shift+ctrl+[Slash]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.blockComment",
        "key": "shift+ctrl+[NumpadDivide]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.blockComment",
        "key": "shift+win+[Slash]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.blockComment",
        "key": "shift+win+[NumpadDivide]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.commentLine",
        "key": "win+[Slash]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.commentLine",
        "key": "win+[NumpadDivide]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "workbench.action.tasks.build",
        "key": "win+f9"
    },
    {
        "command": "copyFilePath",
        "key": "shift+win+c",
        "when": "!editorFocus"
    },
    {
        "command": "workbench.action.debug.run",
        "key": "ctrl+d",
        "when": "debuggersAvailable"
    },
    {
        "command": "merge-conflict.accept.current",
        "key": "shift+ctrl+[ArrowRight]",
        "when": "isInDiffEditor"
    },
    {
        "command": "merge-conflict.accept.incoming",
        "key": "shift+ctrl+[ArrowLeft]",
        "when": "isInDiffEditor"
    },
    {
        "command": "workbench.action.quickOpenNavigateNext",
        "key": "ctrl+[Tab]"
    },
    {
        "command": "git.openChange",
        "key": "win+d"
    },
    {
        "command": "editor.action.goToDeclaration",
        "key": "win+[ArrowDown]",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.goToDeclaration",
        "key": "f4",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.action.files.showOpenedFileInNewWindow",
        "key": "shift+f4",
        "when": "emptyWorkspaceSupport"
    },
    {
        "command": "acceptSelectedSuggestion",
        "key": "[Enter]",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "acceptSelectedSuggestion",
        "key": "[Enter]",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "command": "acceptAlternativeSelectedSuggestion",
        "key": "[Tab]",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    },
    {
        "command": "acceptSelectedSuggestion",
        "key": "shift+win+[Enter]",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "acceptSelectedSuggestion",
        "key": "shift+win+[Enter]",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "command": "editor.action.deleteLines",
        "key": "win+[Backspace]",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "command": "deleteWordRight",
        "key": "alt+[Delete]",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "command": "deleteWordLeft",
        "key": "alt+[Backspace]",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "command": "editor.action.copyLinesDownAction",
        "key": "win+d",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.joinLines",
        "key": "shift+ctrl+j",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "cursorLineEnd",
        "key": "[End]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorLineEnd",
        "key": "win+[ArrowRight]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorLineEnd",
        "key": "ctrl+e",
        "when": "textInputFocus"
    },
    {
        "command": "cursorLineEndSelect",
        "key": "shift+[End]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorLineEndSelect",
        "key": "shift+win+[ArrowRight]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorLineStartSelect",
        "key": "shift+[Home]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorLineStartSelect",
        "key": "shift+win+[ArrowLeft]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorBottom",
        "key": "win+[PageDown]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorBottomSelect",
        "key": "shift+win+[PageDown]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorTop",
        "key": "win+[PageUp]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorTopSelect",
        "key": "shift+win+[PageUp]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordRight",
        "key": "alt+[ArrowRight]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordRight",
        "key": "ctrl+alt+f",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordRightSelect",
        "key": "shift+alt+[ArrowRight]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordRightSelect",
        "key": "shift+ctrl+alt+f",
        "when": "textInputFocus"
    },
    {
        "command": "cursorPageDown",
        "key": "[PageDown]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorPageDownSelect",
        "key": "shift+[PageDown]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorPageUp",
        "key": "[PageUp]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorPageUpSelect",
        "key": "shift+[PageUp]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordLeft",
        "key": "alt+[ArrowLeft]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordLeft",
        "key": "ctrl+alt+b",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordLeftSelect",
        "key": "shift+alt+[ArrowLeft]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorWordLeftSelect",
        "key": "shift+ctrl+alt+b",
        "when": "textInputFocus"
    },
    {
        "command": "editor.action.smartSelect.grow",
        "key": "alt+[ArrowUp]",
        "when": "editorTextFocus"
    },
    {
        "command": "lineBreakInsert",
        "key": "win+[Enter]",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "command": "editor.action.insertLineAfter",
        "key": "shift+[Enter]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.insertLineBefore",
        "key": "win+alt+[Enter]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "cursorBottom",
        "key": "win+[End]",
        "when": "textInputFocus"
    },
    {
        "command": "cursorTop",
        "key": "win+[Home]",
        "when": "textInputFocus"
    },
    {
        "command": "editor.action.toggleColumnSelection",
        "key": "shift+win+8"
    },
    {
        "command": "editor.action.smartSelect.shrink",
        "key": "alt+[ArrowDown]",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.debug.action.selectionToRepl",
        "key": "alt+f8",
        "when": "debuggersAvailable && editorHasSelection"
    },
    {
        "command": "editor.unfoldAll",
        "key": "shift+win+[NumpadAdd]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.unfoldAll",
        "key": "shift+win+[Equal]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.unfold",
        "key": "win+[NumpadAdd]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.unfold",
        "key": "win+[Equal]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.unfoldRecursively",
        "key": "win+alt+[NumpadAdd]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "editor.unfoldRecursively",
        "key": "win+alt+[Equal]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "workbench.action.gotoSymbol",
        "key": "win+f12",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.action.findInFiles",
        "key": "shift+win+f"
    },
    {
        "command": "editor.action.nextMatchFindAction",
        "key": "win+g",
        "when": "editorFocus"
    },
    {
        "command": "editor.action.previousMatchFindAction",
        "key": "shift+win+g",
        "when": "editorFocus"
    },
    {
        "command": "editor.action.previousMatchFindAction",
        "key": "shift+win+g",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "command": "references-view.findReferences",
        "key": "alt+f7",
        "when": "editorHasReferenceProvider"
    },
    {
        "command": "workbench.action.navigateForward",
        "key": "win+[BracketRight]"
    },
    {
        "command": "workbench.action.navigateForward",
        "key": "win+alt+[ArrowRight]"
    },
    {
        "command": "workbench.action.files.newUntitledFile",
        "key": "win+n"
    },
    {
        "command": "git.pushTo",
        "key": "win+alt+k",
        "when": "!inDebugMode && !terminalFocus"
    },
    {
        "command": "workbench.action.showAllSymbols",
        "key": "win+o"
    },
    {
        "command": "workbench.action.quickOpen",
        "key": "win+p"
    },
    {
        "command": "editor.action.goToImplementation",
        "key": "win+alt+b",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "command": "workbench.action.gotoLine",
        "key": "win+l"
    },
    {
        "command": "editor.action.marker.next",
        "key": "f2",
        "when": "editorFocus"
    },
    {
        "command": "editor.action.marker.prev",
        "key": "shift+f2",
        "when": "editorFocus"
    },
    {
        "command": "workbench.action.gotoSymbol",
        "key": "win+alt+o",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.goToTypeDefinition",
        "key": "shift+win+b",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.goToTypeDefinition",
        "key": "shift+ctrl+b",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.action.toggleSidebarVisibility",
        "key": "shift+[Escape]"
    },
    {
        "command": "workbench.action.maximizeEditor",
        "key": "shift+win+f12"
    },
    {
        "command": "workbench.action.navigateToLastEditLocation",
        "key": "shift+win+[Backspace]"
    },
    {
        "command": "editor.action.moveLinesDownAction",
        "key": "shift+alt+[ArrowDown]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.moveLinesUpAction",
        "key": "shift+alt+[ArrowUp]",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "workbench.action.files.newUntitledFile",
        "key": "shift+win+n"
    },
    {
        "command": "workbench.action.compareEditor.nextChange",
        "key": "f7",
        "when": "textCompareEditorVisible"
    },
    {
        "command": "workbench.action.focusNextGroup",
        "key": "alt+[Tab]",
        "when": "editorFocus"
    },
    {
        "command": "editor.action.organizeImports",
        "key": "ctrl+alt+o",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "command": "editor.action.triggerParameterHints",
        "key": "win+p",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "command": "workbench.action.focusPreviousGroup",
        "key": "shift+alt+[Tab]",
        "when": "editorFocus"
    },
    {
        "command": "workbench.action.compareEditor.previousChange",
        "key": "shift+f7",
        "when": "textCompareEditorVisible"
    },
    {
        "command": "workbench.action.selectTheme",
        "key": "ctrl+[Backquote]"
    },
    {
        "command": "editor.action.previewDeclaration",
        "key": "alt+[Space]"
    },
    {
        "command": "editor.action.previewDeclaration",
        "key": "win+y"
    },
    {
        "command": "editor.action.showHover",
        "key": "f1",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.showHover",
        "key": "ctrl+j",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.action.openRecent",
        "key": "win+e",
        "when": "!inQuickOpen"
    },
    {
        "command": "workbench.action.openPreviousEditorFromHistory",
        "key": "win+e",
        "when": "inQuickOpen"
    },
    {
        "command": "editor.action.formatDocument",
        "key": "win+alt+l",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "command": "editor.action.rename",
        "key": "shift+f6",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "command": "editor.action.startFindReplaceAction",
        "key": "win+r",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "command": "workbench.action.replaceInFiles",
        "key": "shift+win+r"
    },
    {
        "command": "workbench.action.debug.continue",
        "key": "win+alt+r",
        "when": "inDebugMode"
    },
    {
        "command": "workbench.action.debug.continue",
        "key": "f9",
        "when": "inDebugMode"
    },
    {
        "command": "workbench.action.tasks.reRunTask",
        "key": "ctrl+r"
    },
    {
        "command": "editor.debug.action.runToCursor",
        "key": "alt+f9",
        "when": "debugState == 'stopped'"
    },
    {
        "command": "workbench.action.files.saveAll",
        "key": "win+s"
    },
    {
        "command": "editor.action.selectHighlights",
        "key": "ctrl+win+g",
        "when": "editorFocus"
    },
    {
        "command": "editor.action.addSelectionToNextFindMatch",
        "key": "ctrl+g",
        "when": "editorFocus"
    },
    {
        "command": "workbench.action.showErrorsWarnings",
        "key": "win+f1",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.quickFix",
        "key": "alt+[Enter]",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "command": "breadcrumbs.focus",
        "key": "win+[ArrowUp]",
        "when": "breadcrumbsPossible"
    },
    {
        "command": "breadcrumbs.focus",
        "key": "alt+[Home]",
        "when": "breadcrumbsPossible"
    },
    {
        "command": "workbench.action.tasks.configureTaskRunner",
        "key": "win+[Semicolon]"
    },
    {
        "command": "workbench.action.openGlobalSettings",
        "key": "win+[Comma]"
    },
    {
        "command": "editor.action.referenceSearch.trigger",
        "key": "win+alt+f7",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "command": "workbench.action.debug.stepInto",
        "key": "f7",
        "when": "debugState != 'inactive'"
    },
    {
        "command": "workbench.action.debug.stepOut",
        "key": "shift+f8",
        "when": "debugState == 'stopped'"
    },
    {
        "command": "workbench.action.debug.stepOver",
        "key": "f8",
        "when": "debugState == 'stopped'"
    },
    {
        "command": "workbench.action.toggleFullScreen",
        "key": "ctrl+win+f"
    },
    {
        "command": "editor.debug.action.toggleBreakpoint",
        "key": "win+f8",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "command": "java.action.showTypeHierarchy",
        "key": "ctrl+h",
        "when": "editorLangId == java && editorTextFocus"
    },
    {
        "command": "cursorUndo",
        "key": "shift+ctrl+g",
        "when": "textInputFocus"
    },
    {
        "command": "git.revertSelectedRanges",
        "key": "win+alt+z",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "git.sync",
        "key": "win+t"
    },
    {
        "command": "editor.action.dirtydiff.next",
        "key": "shift+ctrl+alt+[ArrowDown]",
        "when": "editorTextFocus"
    },
    {
        "command": "editor.action.dirtydiff.previous",
        "key": "shift+ctrl+alt+[ArrowUp]",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.view.debug",
        "key": "shift+win+f8"
    },
    {
        "command": "-workbench.view.debug",
        "key": "shift+win+d"
    },
    {
        "command": "-workbench.action.navigateBack",
        "key": "ctrl+-"
    },
    {
        "command": "-references-view.showCallHierarchy",
        "key": "shift+alt+h"
    },
    {
        "command": "-git.commitAll",
        "key": ""
    },
    {
        "command": "-editor.action.triggerSuggest",
        "key": "win+i"
    },
    {
        "command": "-editor.action.triggerSuggest",
        "key": "alt+escape"
    },
    {
        "command": "-editor.action.triggerSuggest",
        "key": "ctrl+space"
    },
    {
        "command": "-editor.foldAll",
        "key": "win+k win+0"
    },
    {
        "command": "-editor.fold",
        "key": "alt+win+["
    },
    {
        "command": "-editor.foldRecursively",
        "key": "win+k win+["
    },
    {
        "command": "-editor.action.blockComment",
        "key": "shift+alt+a"
    },
    {
        "command": "-editor.action.commentLine",
        "key": "win+/"
    },
    {
        "command": "-workbench.action.tasks.build",
        "key": "shift+win+b"
    },
    {
        "command": "-copyFilePath",
        "key": "alt+win+c"
    },
    {
        "command": "-workbench.action.debug.run",
        "key": "ctrl+f5"
    },
    {
        "command": "-merge-conflict.accept.current",
        "key": ""
    },
    {
        "command": "-merge-conflict.accept.incoming",
        "key": ""
    },
    {
        "command": "-workbench.action.quickOpenNavigateNext",
        "key": ""
    },
    {
        "command": "-git.openChange",
        "key": ""
    },
    {
        "command": "-editor.action.goToDeclaration",
        "key": ""
    },
    {
        "command": "-workbench.action.files.showOpenedFileInNewWindow",
        "key": "win+k o"
    },
    {
        "command": "-acceptSelectedSuggestion",
        "key": "tab"
    },
    {
        "command": "-acceptSelectedSuggestion",
        "key": "enter"
    },
    {
        "command": "-acceptAlternativeSelectedSuggestion",
        "key": "shift+tab"
    },
    {
        "command": "-acceptAlternativeSelectedSuggestion",
        "key": "shift+enter"
    },
    {
        "command": "-editor.action.deleteLines",
        "key": "shift+win+k"
    },
    {
        "command": "-deleteWordRight",
        "key": "alt+delete"
    },
    {
        "command": "-deleteWordLeft",
        "key": "alt+backspace"
    },
    {
        "command": "-editor.action.copyLinesDownAction",
        "key": "shift+alt+down"
    },
    {
        "command": "-editor.action.joinLines",
        "key": "ctrl+j"
    },
    {
        "command": "-cursorLineEndSelect",
        "key": "ctrl+shift+e"
    },
    {
        "command": "-cursorLineStartSelect",
        "key": "ctrl+shift+a"
    },
    {
        "command": "-cursorBottom",
        "key": "win+down"
    },
    {
        "command": "-cursorBottomSelect",
        "key": "shift+win+down"
    },
    {
        "command": "-cursorTop",
        "key": "win+up"
    },
    {
        "command": "-cursorTopSelect",
        "key": "shift+win+up"
    },
    {
        "command": "-cursorWordRight",
        "key": ""
    },
    {
        "command": "-cursorWordRightSelect",
        "key": ""
    },
    {
        "command": "-cursorPageDown",
        "key": "pagedown"
    },
    {
        "command": "-cursorPageDownSelect",
        "key": "shift+pagedown"
    },
    {
        "command": "-cursorPageUp",
        "key": "pageup"
    },
    {
        "command": "-cursorPageUpSelect",
        "key": "shift+pageup"
    },
    {
        "command": "-cursorWordLeft",
        "key": "alt+left"
    },
    {
        "command": "-cursorWordLeftSelect",
        "key": "shift+alt+left"
    },
    {
        "command": "-editor.action.smartSelect.grow",
        "key": ""
    },
    {
        "command": "-lineBreakInsert",
        "key": "ctrl+o"
    },
    {
        "command": "-editor.action.insertLineAfter",
        "key": "win+enter"
    },
    {
        "command": "-editor.action.insertLineBefore",
        "key": "shift+win+enter"
    },
    {
        "command": "-editor.action.toggleColumnSelection",
        "key": ""
    },
    {
        "command": "-editor.action.smartSelect.shrink",
        "key": "ctrl+shift+left"
    },
    {
        "command": "-editor.action.smartSelect.shrink",
        "key": "ctrl+shift+win+left"
    },
    {
        "command": "-editor.debug.action.selectionToRepl",
        "key": ""
    },
    {
        "command": "-editor.unfoldAll",
        "key": "win+k win+j"
    },
    {
        "command": "-editor.unfold",
        "key": "alt+win+]"
    },
    {
        "command": "-editor.unfoldRecursively",
        "key": "win+k win+]"
    },
    {
        "command": "-workbench.action.gotoSymbol",
        "key": "shift+win+o"
    },
    {
        "command": "-editor.action.nextMatchFindAction",
        "key": "f3"
    },
    {
        "command": "-editor.action.nextMatchFindAction",
        "key": "enter"
    },
    {
        "command": "-editor.action.previousMatchFindAction",
        "key": "shift+f3"
    },
    {
        "command": "-editor.action.previousMatchFindAction",
        "key": "shift+enter"
    },
    {
        "command": "-references-view.findReferences",
        "key": "shift+alt+f12"
    },
    {
        "command": "-workbench.action.navigateForward",
        "key": "ctrl+shift+-"
    },
    {
        "command": "-git.pushTo",
        "key": ""
    },
    {
        "command": "-workbench.action.showAllSymbols",
        "key": "win+t"
    },
    {
        "command": "-workbench.action.quickOpen",
        "key": "win+p"
    },
    {
        "command": "-editor.action.goToImplementation",
        "key": "win+f12"
    },
    {
        "command": "-workbench.action.gotoLine",
        "key": "ctrl+g"
    },
    {
        "command": "-editor.action.marker.next",
        "key": "alt+f8"
    },
    {
        "command": "-editor.action.marker.prev",
        "key": "shift+alt+f8"
    },
    {
        "command": "-editor.action.goToTypeDefinition",
        "key": ""
    },
    {
        "command": "-workbench.action.toggleSidebarVisibility",
        "key": "win+b"
    },
    {
        "command": "-workbench.action.maximizeEditor",
        "key": ""
    },
    {
        "command": "-workbench.action.navigateToLastEditLocation",
        "key": "win+k win+q"
    },
    {
        "command": "-editor.action.moveLinesDownAction",
        "key": "alt+down"
    },
    {
        "command": "-editor.action.moveLinesUpAction",
        "key": "alt+up"
    },
    {
        "command": "-workbench.action.compareEditor.nextChange",
        "key": "alt+f5"
    },
    {
        "command": "-workbench.action.focusNextGroup",
        "key": ""
    },
    {
        "command": "-workbench.action.nextEditor",
        "key": "shift+win+]"
    },
    {
        "command": "-workbench.action.nextEditor",
        "key": "alt+win+right"
    },
    {
        "command": "-editor.action.organizeImports",
        "key": "shift+alt+o"
    },
    {
        "command": "-editor.action.triggerParameterHints",
        "key": "shift+win+space"
    },
    {
        "command": "-workbench.action.focusPreviousGroup",
        "key": ""
    },
    {
        "command": "-workbench.action.compareEditor.previousChange",
        "key": "shift+alt+f5"
    },
    {
        "command": "-workbench.action.previousEditor",
        "key": "shift+win+["
    },
    {
        "command": "-workbench.action.previousEditor",
        "key": "alt+win+left"
    },
    {
        "command": "-workbench.action.selectTheme",
        "key": "win+k win+t"
    },
    {
        "command": "-editor.action.previewDeclaration",
        "key": ""
    },
    {
        "command": "-editor.action.showHover",
        "key": "win+k win+i"
    },
    {
        "command": "-workbench.action.openPreviousEditorFromHistory",
        "key": ""
    },
    {
        "command": "-editor.action.formatDocument",
        "key": "shift+alt+f"
    },
    {
        "command": "-editor.action.rename",
        "key": "f2"
    },
    {
        "command": "-editor.action.startFindReplaceAction",
        "key": "alt+win+f"
    },
    {
        "command": "-workbench.action.replaceInFiles",
        "key": "shift+win+h"
    },
    {
      "command": "editor.action.nextMatchFindAction",
      "key": "enter",
      "when": "editorFocus && findInputFocussed"
    },
    {
        "command": "-workbench.action.debug.continue",
        "key": "f5"
    },
    {
        "command": "-workbench.action.tasks.reRunTask",
        "key": ""
    },
    {
        "command": "-editor.debug.action.runToCursor",
        "key": ""
    },
    {
        "command": "-workbench.action.files.saveAll",
        "key": "alt+win+s"
    },
    {
        "command": "-editor.action.selectHighlights",
        "key": "shift+win+l"
    },
    {
        "command": "-editor.action.addSelectionToNextFindMatch",
        "key": "win+d"
    },
    {
        "command": "-workbench.action.showErrorsWarnings",
        "key": ""
    },
    {
        "command": "-editor.action.quickFix",
        "key": "win+."
    },
    {
        "command": "-breadcrumbs.focus",
        "key": "shift+win+;"
    },
    {
        "command": "-workbench.action.tasks.configureTaskRunner",
        "key": ""
    },
    {
        "command": "-workbench.action.openGlobalSettings",
        "key": ""
    },
    {
        "command": "-editor.action.referenceSearch.trigger",
        "key": "Enter"
    },
    {
        "command": "-workbench.action.debug.stepInto",
        "key": "f11"
    },
    {
        "command": "-workbench.action.debug.stepOut",
        "key": "shift+f11"
    },
    {
        "command": "-workbench.action.debug.stepOver",
        "key": "f10"
    },
    {
        "command": "-editor.debug.action.toggleBreakpoint",
        "key": "f9"
    },
    {
        "command": "-java.action.showTypeHierarchy",
        "key": ""
    },
    {
        "command": "-cursorUndo",
        "key": "win+u"
    },
    {
        "command": "-git.revertSelectedRanges",
        "key": "win+k win+r"
    },
    {
        "command": "-git.sync",
        "key": ""
    },
    {
        "command": "-editor.action.dirtydiff.next",
        "key": "alt+f3"
    },
    {
        "command": "-editor.action.dirtydiff.previous",
        "key": "shift+alt+f3"
    },
    {
      "key": "shift+win+o",
      "command": "-workbench.action.quickOpen"
    },
    {
      "key": "win+f",
      "command": "-list.find",
      "when": "listFocus && listSupportsFind"
    },
    {
      "key": "shift+alt+win+left",
      "command": "workbench.action.navigateBack",
      "when": "canNavigateBack"
    },
    {
      "key": "alt+win+left",
      "command": "-workbench.action.navigateBack",
      "when": "canNavigateBack"
    },
    {
      "key": "shift+alt+win+right",
      "command": "workbench.action.navigateForward",
      "when": "canNavigateForward"
    },
    {
      "key": "alt+win+left",
      "command": "workbench.action.navigateBack",
      "when": "canNavigateBack"
    },
    {
      "key": "shift+win+a",
      "command": "-workbench.action.showCommands"
    },
    {
      "key": "f1",
      "command": "-workbench.action.showCommands"
    },
    {
      "key": "shift+alt+win+p",
      "command": "workbench.action.showCommands"
    },
    {
      "key": "alt+f16",
      "command": "-workbench.action.showCommands"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "shift+alt+win+j",
        "command": "-notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+alt+win+n",
        "command": "welcome.showNewFileEntries"
    },
    {
        "key": "ctrl+alt+win+n",
        "command": "-welcome.showNewFileEntries"
    },
    {
        "key": "shift+alt+win+up",
        "command": "editor.action.revealDefinition"
    },
    {
        "key": "shift+alt+win+down",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "alt+f18",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "alt+f17",
        "command": "editor.action.sourceAction",
        "args": {
            "kind": "source.addMissingImports",
            "apply": "first"
        }
    }
  ]
